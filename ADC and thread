import machine
from ssd1306 import SSD1306_I2C
import _thread
import time
import utime
import math

# Initialize hardware components
machine.freq(133000000)
led = machine.Pin(19, machine.Pin.OUT)
button = machine.Pin(22, machine.Pin.IN)
adc = machine.ADC(machine.Pin(26))
i2c = machine.I2C(0, sda=machine.Pin(20), scl=machine.Pin(21), freq=200000)
oled = SSD1306_I2C(128, 64, i2c)
pwm1 = machine.PWM(machine.Pin(17))
pwm2 = machine.PWM(machine.Pin(16))
sin = machine.PWM(machine.Pin(15))

# Global variables
state = False
interrupt_flag = False
lock = _thread.allocate_lock()
touch_detected = False

#sin gen
sin_frequency = 50      # Frequency of the sine wave in Hz
amplitude = 127       # Amplitude of the sine wave (0-255)
num_samples = 100     # Number of samples per period
period = 1 / sin_frequency
duty_cycles = [int((math.sin(2 * math.pi * i / num_samples) * amplitude) + amplitude) for i in range(num_samples)]

# pwm with phase shift

frequency = 10000
phase_shift_degrees = 90
phase_shift_seconds = int((phase_shift_degrees / 360) * (1 / frequency))

# Function to update the OLED 
def update_oled():
    global volt
    while True:
        value = adc.read_u16()
        volt = value / 65535 * 100

        with lock:
            oled.fill(0)
            oled.text("-" * 32, 0, 2 * 10)
            oled.text("Duty Cycle:%0.2f" % volt, 0, 1 * 10)
            oled.show()
        time.sleep(0.02)
def main():
    global state, interrupt_flag, touch_detected

    while True:
        if button.value() == 1 and not touch_detected:
            state = not state
            touch_detected = True
        if button.value() == 0:
            touch_detected = False
        led.value(state)

        value = adc.read_u16()
        volt = value / 65535 * 100
        # Delay for phase shift
        with lock:
            pwm1.freq(10000)
            pwm1.duty_u16(round((volt / 100) * 65535))
            pwm2.duty_u16(((32768) + phase_shift_degrees) % 65535)
        #generate sinwave
        if state :
            for duty_cycle in duty_cycles:
                print(duty_cycle)
                sin.duty_u16(int(duty_cycle * 65535 / 255))
                utime.sleep_us(int(period * 1000000 / num_samples))
        if interrupt_flag:
            print("Interrupted!")
            interrupt_flag = False 




# Start the OLED update thread
            
_thread.start_new_thread(update_oled, ())

# Start the main loop

main()
